cat("Budget=",budget,"\n\n");
idx<-sample(1:N, n, replace=FALSE);
idxt<-(1:N)[-idx];
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial");
summary(myglm)
a0<-myglm$a0;
plot(a0)
iters<-dim(myglm$beta)[2];
for(j in 1:iters)
{
b<-myglm$beta[,j];
logits<-matrix(0,length(idxt),1);
for (i in 1:length(idxt))
{
logits[i]<-a0[j]+sum(data[idxt[i],1:(p-1)]*b);
}
logits<-exp(logits)/(1+exp(logits));
##To calculate the accuracy based on a confusion matrix
classDF <- data.frame(response = data[idxt,p], predicted = round(logits,0))
z<-xtabs(~ predicted + response, data = classDF)
acc<-sum(diag(z))/sum(z);
##To calculate the total cost for all variables included in the model
tmp<-b; tmp[tmp!=0]<-1; cost<-sum(tmp * budget);
cat("j=", j, ", lambda=",myglm$lambda[j],", #vars=",sum(tmp),", costs=",cost,", Accuracy=", acc,"@",date(),"\n");
}##End of for(j)
data <- read_excel("C:/Users/vnagaraju/Desktop/Updateddata.xlsx")
data
N<-nrow(data);
N
p<-ncol(data)
p
names(data)[p] <- "spam"; ## 1 is spam, 0 is not spam
budget<-sample(1:100,(p-1),replace=TRUE)
cat("Budget=",budget,"\n\n");
idx<-sample(1:N, n, replace=FALSE);
idxt<-(1:N)[-idx];
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial");
myglm
plot(myglm)
summary(myglm)
n<-400; ##Size of the training set used by HTF
data <- read_excel("C:/Users/vnagaraju/Desktop/Updateddata.xlsx")
N<-nrow(data);
p<-ncol(data)
names(data)[p] <- "spam"; ## 1 is spam, 0 is not spam
budget<-sample(1:100,(p-1),replace=TRUE)
cat("Budget=",budget,"\n\n");
idx<-sample(1:N, n, replace=FALSE);
idxt<-(1:N)[-idx];
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial");
plot(myglm)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("fitdistrplus")
install.packages("logspline")
library(fitdistrplus)
library(logspline)
x <- c(37.50,46.79,48.30,46.04,43.40,39.25,38.49,49.51,40.38,36.98,40.00,
38.49,37.74,47.92,44.53,44.91,44.91,40.00,41.51,47.92,36.98,43.40,
42.26,41.89,38.87,43.02,39.25,40.38,42.64,36.98,44.15,44.91,43.40,
49.81,38.87,40.00,52.45,53.13,47.92,52.45,44.91,29.54,27.13,35.60,
45.34,43.37,54.15,42.77,42.88,44.26,27.14,39.31,24.80,16.62,30.30,
36.39,28.60,28.53,35.84,31.10,34.55,52.65,48.81,43.42,52.49,38.00,
38.65,34.54,37.70,38.11,43.05,29.95,32.48,24.63,35.33,41.34)
plotx()
plot(x)
descdist(x, discrete = FALSE)
fit.weibull <- fitdist(x, "weibull")
summary(fit.weibull)
fit.norm <- fitdist(x, "norm")
fit.norm
summary(fit.norm)
x <- c(37.50,46.79,48.30,46.04,43.40,39.25,38.49,49.51,40.38,36.98,40.00,
38.49,37.74,47.92,44.53,44.91,44.91,40.00,41.51,47.92,36.98,43.40,
42.26,41.89,38.87,43.02,39.25,40.38,42.64,36.98,44.15,44.91,43.40,
49.81,38.87,40.00,52.45,53.13,47.92,52.45,44.91,29.54,27.13,35.60,
45.34,43.37,54.15,42.77,42.88,44.26,27.14,39.31,24.80,16.62,30.30,
36.39,28.60,28.53,35.84,31.10,34.55,52.65,48.81,43.42,52.49,38.00,
38.65,34.54,37.70,38.11,43.05,29.95,32.48,24.63,35.33,41.34)
plot(x)
descdist(x, discrete = FALSE)
fit.weibull <- fitdist(x, "weibull")
summary(fit.weibull)
fit.norm <- fitdist(x, "norm")
summary(fit.norm)
?fitdistrplus
??fitdistrplus
x <- c(1.6,2.3,2.7,2.99,3.22,3.40,3.55,3.69,3.91,4.09,4.24,4.38,4.49,4.60)
plot(x)
descdist(x, discrete = FALSE)
descdist(x, discrete = FALSE)
fit.weibull <- fitdist(x, "weibull")
summary(fit.weibull)
x <- c(1.6,0.7,0.4,0.29,0.23,0.18,0.15,0.14,0.22,0.18,0.15,0.14,0.11,0.11)
plot(x)
descdist(x, discrete = FALSE)
x <- c(1.6,0.7,0.4,0.29,0.23,0.18,0.15,0.14,0.22,0.18,0.15,0.14,0.11,0.11,1.6,0.7,0.4,0.29,0.23,0.18,0.15,0.14,0.22,0.18,0.15,0.14,0.11,0.11)
plot(x)
descdist(x, discrete = FALSE)
fit.weibull <- fitdist(x, "weibull")
summary(fit.weibull)
library(fitdistrplus)
library(logspline)
x <- c(1.6,0.7,0.4,0.29,0.23,0.18,0.15,0.14,0.22,0.18,0.15,0.14,0.11,0.11,1.6,0.7,0.4,0.29,0.23,0.18,0.15,0.14,0.22,0.18,0.15,0.14,0.11,0.11)
plot(x)
descdist(x, discrete = FALSE)
x <- c(1.6,0.7,0.4,0.29,0.23,0.18,0.15,0.14,0.22,0.18,0.15,0.14,0.11,0.11)
plot(x)
descdist(x, discrete = FALSE)
fit.weibull <- fitdist(x, "weibull")
summary(fit.weibull)
fit.norm <- fitdist(x, "norm")
summary(fit.norm)
x <- c(1.6,0.7,0.4,0.29,0.23,0.18,0.15,0.14,0.22,0.18,0.15,0.14,0.11,0.11,0.7,2.03,1.64,1.39,1.2,1.08,0.96,1.7,1.46,1.28,1.16,1.05,0.96)
plot(x)
install.packages("knitr")
library(knitr)
install.packages("knitr")
install.packages("knitr")
library(knitr)
?stitch
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
DataAndTrendPlot
DataTrendTable
tempResultsList
SuccessfulModels
FailedModels
MR_Table
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
tempResultsList
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
tempResultsList
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
DataAndTrendPlot
tempResultsList
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
data_original
data_original
DataAndTrendPlot
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
DataAndTrendPlot2
DataAndTrendPlot1
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
DataAndTrendPlot1
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
source('C:/Users/vnagaraju/Google Drive/Metrics-based/Code/L1Budget.R')
library(readr)
Steelplant <- read_csv("C:/Users/vnagaraju/Google Drive/Metrics-based/Code/Steelplant.DATA")
View(Steelplant)
x<-read.table("New Text Document.txt",sep="");
library(readxl)
Steelplant <- read_excel("C:/Users/vnagaraju/Google Drive/Metrics-based/Code/Steelplant.xlsx",
col_names = FALSE)
View(Steelplant)
library(glmnet);
library(readxl)
x <- read_excel("C:/Users/vnagaraju/Google Drive/Metrics-based/Code/Steelplant.xlsx")
n<-floor(N*0.5); ##Half of the data for training
library(glmnet);
x <- read_excel("C:/Users/vnagaraju/Google Drive/Metrics-based/Code/Steelplant.xlsx")
N<-nrow(x);
n<-floor(N*0.5); ##Half of the data for training
p<-ncol(x);
q3Compressor<-quantile(x[,p-1],0.5);
q3Turbine<-quantile(x[,p],0.5);
y<-matrix(1,nrow(x),1);
for(i in 1:nrow(x))
{
if(x[i,p-1]< q3Compressor & x[i,p] <q3Turbine) y[i]<-0; ##No maintenance required
}
q3Compressor
quantile(x[,p-1],0.5)
n<-floor(N*0.8); ##Half of the data for training
p<-ncol(x);
q3Compressor<-quantile(x[,p-1],0.5);
quantile(x[,p-1],0.5)
x
library(glmnet);
library(glmnet);
##n<-3065; ##Size of the training set used by HTF
##data<-read.table("spam.Data",sep=",");
##N<-nrow(data);
##p<-ncol(data);
##names(data)[p] <- "spam"; ## 1 is spam, 0 is not spam
x<-read.table("NavalPlants.Data",sep="");
N<-nrow(x);
n<-floor(N*0.5); ##Half of the data for training
p<-ncol(x);
q3Compressor<-quantile(x[,p-1],0.5);
q3Turbine<-quantile(x[,p],0.5);
y<-matrix(1,nrow(x),1);
for(i in 1:nrow(x))
{
if(x[i,p-1]< q3Compressor & x[i,p] <q3Turbine) y[i]<-0; ##No maintenance required
}
data<-cbind(x[,1:(p-2)],y);
p<-p-1;
names(data)[p] <- "spam"; ## 1 is spam/maintenance, 0 is not spam
##Cost for each individual variable, to be obtained from underlying application
##For illustration purpose, we take a random set of values
budget<-sample(1:100,(p-1),replace=TRUE);
cat("Budget=",budget,"\n\n");
idx<-sample(1:N, n, replace=FALSE);
idxt<-(1:N)[-idx];
##if(F){
xx<-matrix(0,N,p); for(i in 1:p) { xx[,i]<-data[,i];}
myglm.cv<-cv.glmnet(xx[idx,1:(p-1)],xx[idx,p],family=c("binomial"), alpha=1);
mypred<-predict(myglm.cv,xx[-idx,1:(p-1)], type="class");
acc.cv<-sum(mypred==xx[-idx,p])/length(xx[-idx,p]);
plot(myglm.cv)
lambda.cv<-myglm.cv$lambda.min;
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx],
family="binomial",lambda=lambda.cv);
plot(myglm.cv)
##To calculate the total cost for all variables included in the model
myglm.cv$beta
tmp<-myglm.cv$beta; tmp[tmp!=0]<-1; cost.cv<-sum(tmp * budget); nvars.cv<-sum(tmp);
cat("cv.glmnet(): lambda=",lambda.cv,", #vars=",nvars.cv,", costs=",cost.cv,", Accuracy=", acc.cv,"@",date(),"\n");
##}
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial",lambda.min.ratio=0.0000001,nlambda=200);
plot(myglm)
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial",lambda.min.ratio=0.0000001,nlambda=200);
idx
data$spam
data
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial",lambda.min.ratio=0.0000001,nlambda=200);
shiny::runApp('C:/Users/vnagaraju/Dropbox/NavAir project/SRT_R-Routines/login')
runApp('C:/Users/vnagaraju/Dropbox/NavAir project/SRT_R-Routines/login')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-stable/srt.core-stable')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
library(shiny); runApp('C:/Users/vnagaraju/Desktop/srt.core-master/srt.core-master/app.R.R')
runApp('C:/Users/vnagaraju/Desktop/srt.core-master/srt.core-master/app.R.R')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
?debugSource
??debug
?Source
??Source
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
library(glmnet);
x<-read.table("parkinsonsupdrs.Data",sep="");
N<-nrow(x);
x<-read.table("parkinsonsupdrs.Data",sep="");
x
x<-read.table("parkinsonsupdrs.Data",sep="");
N<-nrow(x);
n<-floor(N*0.8); ##Half of the data for training
p<-ncol(x);
q3Compressor<-quantile(x[,p-1],0.5);
q3Turbine<-quantile(x[,p],0.5);
y<-matrix(1,nrow(x),1);
for(i in 1:nrow(x))
{
if(x[i,p-1]< q3Compressor & x[i,p] <q3Turbine) y[i]<-0; ##No maintenance required
}
data<-cbind(x[,1:(p-2)],y);
p<-p-1;
names(data)[p] <- "spam"; ## 1 is spam/maintenance, 0 is not spam
budget<-sample(1:100,(p-1),replace=TRUE);
cat("Budget=",budget,"\n\n");
idx<-sample(1:N, n, replace=FALSE);
idxt<-(1:N)[-idx];
xx<-matrix(0,N,p); for(i in 1:p) { xx[,i]<-data[,i];}
myglm.cv<-cv.glmnet(xx[idx,1:(p-1)],xx[idx,p],family=c("binomial"), alpha=1);
mypred<-predict(myglm.cv,xx[-idx,1:(p-1)], type="class");
acc.cv<-sum(mypred==xx[-idx,p])/length(xx[-idx,p]);
plot(myglm.cv)
lambda.cv<-myglm.cv$lambda.min;
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx],
family="binomial",lambda=lambda.cv);
plot(myglm.cv)
plot(myglm.cv)
myglm.cv
plot(myglm.cv)
myglm.cv$beta
tmp<-myglm.cv$beta; tmp[tmp!=0]<-1; cost.cv<-sum(tmp * budget); nvars.cv<-sum(tmp);
cat("cv.glmnet(): lambda=",lambda.cv,", #vars=",nvars.cv,", costs=",cost.cv,", Accuracy=", acc.cv,"@",date(),"\n");
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial",lambda.min.ratio=0.0000001,nlambda=200);
p
x[14]
x
idx
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$Shimmer[idx],
family="binomial",lambda=lambda.cv);
data
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx],
family="binomial",lambda=lambda.cv);
idx
spam[idx]
data$spam
data[idx]
data$
x
data
data[,idx]
data[idx,]
lambda.cv<-myglm.cv$lambda.min;
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,],
family="binomial",lambda=lambda.cv);
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,],
family="multinomial",lambda=lambda.cv);
plot(myglm.cv)
myglm.cv$beta
tmp<-myglm.cv$beta; tmp[tmp!=0]<-1; cost.cv<-sum(tmp * budget); nvars.cv<-sum(tmp);
cat("cv.glmnet(): lambda=",lambda.cv,", #vars=",nvars.cv,", costs=",cost.cv,", Accuracy=", acc.cv,"@",date(),"\n");
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial",lambda.min.ratio=0.0000001,nlambda=200);
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,], family="multinomial",lambda.min.ratio=0.0000001,nlambda=200);
plot(myglm)
a0<-myglm$a0;
iters<-dim(myglm$beta)[2];
models<-NULL;
for(j in 1:iters)
{
b<-myglm$beta[,j];
logits<-matrix(0,length(idxt),1);
for (i in 1:length(idxt))
{
logits[i]<-a0[j]+sum(data[idxt[i],1:(p-1)]*b);
}
logits<-exp(logits)/(1+exp(logits));
##To calculate the accuracy based on a confusion matrix
classDF <- data.frame(response = data[idxt,p], predicted = round(logits,0))
z<-xtabs(~ predicted + response, data = classDF)
acc<-sum(diag(z))/sum(z);
##To calculate the total cost for all variables included in the model
tmp<-b; tmp[tmp!=0]<-1; cost<-sum(tmp * budget); nvars<-sum(tmp);
cat("j=",j,", lambda=",myglm$lambda[j],", #vars=",nvars,", costs=",cost,", Accuracy=", acc,"\n");
tmp<-matrix(0,1,4);
tmp[1]<-myglm$lambda[j]; tmp[2]<-nvars; tmp[3]<-cost; tmp[4]<-acc;
models<-rbind(models,tmp);
}##End of for(j)
tmp<-sort(models[,3],decreasing=TRUE, index.return=TRUE);
models<-models[tmp$ix,];
tLine<-matrix(0,1,7);
tLine[1]<-models[1,1]; tLine[2]<-models[1,2];
tLine[3]<-models[1,3]; tLine[4]<-models[1,4];
tLine[5]<-nvars.cv; tLine[6]<-cost.cv; tLine[7]<-acc.cv;
modelSummary<-matrix(0,length(unique(models[,3])),7);
modelSummary[1,]<-tLine;
jj<-1;
for(i in 1:nrow(models))
{
if(models[i,3] == tLine[3])
{
if(tLine[4] < models[i,4]) ##Better accuracy under the same cost
{
tLine[1:4]<-models[i,1:4];
}
}
else
{
modelSummary[jj,1:7]<-tLine; jj<-jj+1;
tLine[1:4]<-models[i,1:4];
}
}
modelSummary[jj,]<-tLine;
m<-nrow(modelSummary);
indicator<-matrix(0,m,1);
for(i in 1:(m-1))
{
for(j in (i+1):m) {
if(modelSummary[j,4] >= modelSummary[i,4]) indicator[i]<-1;
}
}
modelSummaryf<-modelSummary[indicator==0,];
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
library(glmnet);
x<-read.table("parkinsonsupdrs.Data",sep="");
getwd
getwd()
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs/srt.core-developvs')
shiny::runApp('C:/Users/vnagaraju/Desktop/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master(1)/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-Okamura/srt.core-master')
source('~/srt.core/srt.core/install_script.R')
runApp('srt.core/srt.core')
shiny::runApp('srt.core/srt.core')
source('~/srt.core/srt.core/install_script.R')
source('~/srt.core/srt.core/install_script.R')
install.packages(Rsrat)
install.packages("Rsrat")
install.packages("Rsrat")
library(Rsrat)
version
install.packages("Rtools")
install.packages("Rtools34")
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
install.packages('shiny', repos = 'http://cran.rstudio.com')
install.packages("shiny", repos = "http://cran.rstudio.com")
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
1+2
set.seed(32)
gh <- set.seed(32)
gh
set.seed(32)
source('~/.active-rstudio-document')
m
s
a
b
theta=rgamma(n=m,shape=1,rate=b)#creates random generation from the gamma distribution
theta
head(theta)
plot(theta)
tail(theta)
hist(theta)
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
hist(theta)
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
curve(dgamma(x,shape=a,rate=b),col="blue",add=TRUE) #dgamma is density of the gamma #'add' creates a graph on the existing curve
rgamma
rgamma
theta=rgamma(n=m,shape=1,rate=b)#creates random generation from the gamma distribution
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
curve(dgamma(x,shape=a,rate=b),col="blue",add=TRUE) #dgamma is density of the gamma #'add' creates a graph on the existing curve
source('~/.active-rstudio-document')
sum(theta)/m # or use mean(theta)
a/b
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
sum(theta)/m # or use mean(theta)
a/b
var(theta) #Monte Carlo estimated mean
a/b^2 #theoretical mean
ind = theta < 5.0 #create
ind
head(ind)
head(theta)
mean(ind)
pgamma(q=5.0,shape=a,rate=b) #Compare it with the true gamma probability (pgamma gives the cdf of gamma)
quantile(theta,probs=0.9)
qgamma(p=0.9,shape=a,rate=b)
qgamma(p=0.9,shape=a,rate=b)#true theoretical value
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
quantile(theta,probs=0.9)#90% quantile
qgamma(p=0.9,shape=a,rate=b)#true theoretical value
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
se=sd(theta)/sqrt(m)
se
2*se
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
mean(theta) - 2.0*se
mean(theta) +2.0*se
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
se=sd(ind)/sqrt(m)
se
se*2
floor((10/136)*100)
floor((5/136)*100)
setwd("C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2")
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
Sys.time()
Sys.Date()
Sys.timezone()
format(Sys.time(), "%a %b %d %X %Y")
Sys.time()
last(Sys.time())
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
format(Sys.time(), "%Y-%m-%d_%H:%M")
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
source('C:/Users/vnagaraju/Dropbox/SFRAT_Automated-Report-Generation-master-2/Executable.R')
