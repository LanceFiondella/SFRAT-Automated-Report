idx
spam[idx]
data$spam
data[idx]
data$
x
data
data[,idx]
data[idx,]
lambda.cv<-myglm.cv$lambda.min;
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,],
family="binomial",lambda=lambda.cv);
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,],
family="multinomial",lambda=lambda.cv);
plot(myglm.cv)
myglm.cv$beta
tmp<-myglm.cv$beta; tmp[tmp!=0]<-1; cost.cv<-sum(tmp * budget); nvars.cv<-sum(tmp);
cat("cv.glmnet(): lambda=",lambda.cv,", #vars=",nvars.cv,", costs=",cost.cv,", Accuracy=", acc.cv,"@",date(),"\n");
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial",lambda.min.ratio=0.0000001,nlambda=200);
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,], family="multinomial",lambda.min.ratio=0.0000001,nlambda=200);
plot(myglm)
a0<-myglm$a0;
iters<-dim(myglm$beta)[2];
models<-NULL;
for(j in 1:iters)
{
b<-myglm$beta[,j];
logits<-matrix(0,length(idxt),1);
for (i in 1:length(idxt))
{
logits[i]<-a0[j]+sum(data[idxt[i],1:(p-1)]*b);
}
logits<-exp(logits)/(1+exp(logits));
##To calculate the accuracy based on a confusion matrix
classDF <- data.frame(response = data[idxt,p], predicted = round(logits,0))
z<-xtabs(~ predicted + response, data = classDF)
acc<-sum(diag(z))/sum(z);
##To calculate the total cost for all variables included in the model
tmp<-b; tmp[tmp!=0]<-1; cost<-sum(tmp * budget); nvars<-sum(tmp);
cat("j=",j,", lambda=",myglm$lambda[j],", #vars=",nvars,", costs=",cost,", Accuracy=", acc,"\n");
tmp<-matrix(0,1,4);
tmp[1]<-myglm$lambda[j]; tmp[2]<-nvars; tmp[3]<-cost; tmp[4]<-acc;
models<-rbind(models,tmp);
}##End of for(j)
tmp<-sort(models[,3],decreasing=TRUE, index.return=TRUE);
models<-models[tmp$ix,];
tLine<-matrix(0,1,7);
tLine[1]<-models[1,1]; tLine[2]<-models[1,2];
tLine[3]<-models[1,3]; tLine[4]<-models[1,4];
tLine[5]<-nvars.cv; tLine[6]<-cost.cv; tLine[7]<-acc.cv;
modelSummary<-matrix(0,length(unique(models[,3])),7);
modelSummary[1,]<-tLine;
jj<-1;
for(i in 1:nrow(models))
{
if(models[i,3] == tLine[3])
{
if(tLine[4] < models[i,4]) ##Better accuracy under the same cost
{
tLine[1:4]<-models[i,1:4];
}
}
else
{
modelSummary[jj,1:7]<-tLine; jj<-jj+1;
tLine[1:4]<-models[i,1:4];
}
}
modelSummary[jj,]<-tLine;
m<-nrow(modelSummary);
indicator<-matrix(0,m,1);
for(i in 1:(m-1))
{
for(j in (i+1):m) {
if(modelSummary[j,4] >= modelSummary[i,4]) indicator[i]<-1;
}
}
modelSummaryf<-modelSummary[indicator==0,];
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
library(glmnet);
x<-read.table("parkinsonsupdrs.Data",sep="");
getwd
getwd()
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs/srt.core-developvs')
shiny::runApp('C:/Users/vnagaraju/Desktop/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master(1)/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-Okamura/srt.core-master')
source('~/srt.core/srt.core/install_script.R')
runApp('srt.core/srt.core')
shiny::runApp('srt.core/srt.core')
source('~/srt.core/srt.core/install_script.R')
source('~/srt.core/srt.core/install_script.R')
install.packages(Rsrat)
install.packages("Rsrat")
install.packages("Rsrat")
library(Rsrat)
version
install.packages("Rtools")
install.packages("Rtools34")
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
install.packages('shiny', repos = 'http://cran.rstudio.com')
install.packages("shiny", repos = "http://cran.rstudio.com")
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
1+2
set.seed(32)
gh <- set.seed(32)
gh
set.seed(32)
source('~/.active-rstudio-document')
m
s
a
b
theta=rgamma(n=m,shape=1,rate=b)#creates random generation from the gamma distribution
theta
head(theta)
plot(theta)
tail(theta)
hist(theta)
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
hist(theta)
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
curve(dgamma(x,shape=a,rate=b),col="blue",add=TRUE) #dgamma is density of the gamma #'add' creates a graph on the existing curve
rgamma
rgamma
theta=rgamma(n=m,shape=1,rate=b)#creates random generation from the gamma distribution
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
curve(dgamma(x,shape=a,rate=b),col="blue",add=TRUE) #dgamma is density of the gamma #'add' creates a graph on the existing curve
source('~/.active-rstudio-document')
sum(theta)/m # or use mean(theta)
a/b
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
sum(theta)/m # or use mean(theta)
a/b
var(theta) #Monte Carlo estimated mean
a/b^2 #theoretical mean
ind = theta < 5.0 #create
ind
head(ind)
head(theta)
mean(ind)
pgamma(q=5.0,shape=a,rate=b) #Compare it with the true gamma probability (pgamma gives the cdf of gamma)
quantile(theta,probs=0.9)
qgamma(p=0.9,shape=a,rate=b)
qgamma(p=0.9,shape=a,rate=b)#true theoretical value
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
quantile(theta,probs=0.9)#90% quantile
qgamma(p=0.9,shape=a,rate=b)#true theoretical value
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
se=sd(theta)/sqrt(m)
se
2*se
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
mean(theta) - 2.0*se
mean(theta) +2.0*se
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
se=sd(ind)/sqrt(m)
se
se*2
floor((10/136)*100)
floor((5/136)*100)
source('C:/Users/vnagaraju/Downloads/install_script.R')
cf < c1:10()
cf < c(1:10)
cf <- c(1:10)
last(cf)
Last[cf]
Last(cf)
length(cf)
cf[length(cf)]
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
library(fitdistrplus)
library(logspline)
x<-c(3,33,146,227,342,351,353,444,556,571,709,759,836,860,968,1056,1726,1846,1872,1986,2311,2366,2608,2676,3098,3278,3288,4434,5034,5049,5085,5089,5089,5097,5324,5389,5565,5623,6080,6380,6477,6740,7192,7447,7644,7837,7843,7922,8738,10089,10237,10258,10491,10625,10982,11175,11411,11442,11811,12559,12559,12791,13121,13486,14708,15251,15261,15277,15806,16185,16229,16358,17168,17458,17758,18287,18568,18728,19556,20567,21012,21308,23063,24127,25910,26770,27753,28460,28493,29361,30085,32408,35338,36799,37642,37654,37915,39715,40580,42015,42045,42188,42296,42296,45406,46653,47596,48296,49171,49416,50145,52042,52489,52875,53321,53443,54433,55381,56463,56485,56560,57042,62551,62651,62661,63732,64103,64893,71043,74364,75409,76057,81542,82702,84566,88682)
descdist(x, discrete = FALSE)
descdist(x, discrete = TRUE)
descdist(x, discrete = FALSE)
log(88682)
set.seed(1)
gf <- set.seed(1)
gf
x=c(rnorm(50,0,1),rnorm(50,5,1),rnorm(50,10,1),rnorm(50,3,1))
x
plot(x)
lineplot(x)
line(x)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmean=cpt.mean(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansvar=cpt.var(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
?cpt
??changepoint
?cpt.meanvar
??cpt.meanvar
install.packages('changepoint')
library(changepoint)
install.packages('changepoint.np')
library(changepoint)
library(changepoint.np)
set.seed(1)
x=c(rnorm(50,0,1),rnorm(50,5,1),rnorm(50,10,1),rnorm(50,3,1))
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmean=cpt.mean(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansvar=cpt.var(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmeanvar=cpt.meanvar(x,Q=2)
plot(ansmeanvar,cpt.width=3)
print(ansmeanvar)
set.seed(1)
x <- c(3,33,146,227,342,351,353,444,556,571,709,759,836,860,968,1056,1726,1846,1872,1986,2311,2366,2608,2676,3098,3278,3288,4434,5034,5049,5085,5089,5089,5097,5324,5389,5565,5623,6080,6380,6477,6740,7192,7447,7644,7837,7843,7922,8738,10089,10237,10258,10491,10625,10982,11175,11411,11442,11811,12559,12559,12791,13121,13486,14708,15251,15261,15277,15806,16185,16229,16358,17168,17458,17758,18287,18568,18728,19556,20567,21012,21308,23063,24127,25910,26770,27753,28460,28493,29361,30085,32408,35338,36799,37642,37654,37915,39715,40580,42015,42045,42188,42296,42296,45406,46653,47596,48296,49171,49416,50145,52042,52489,52875,53321,53443,54433,55381,56463,56485,56560,57042,62551,62651,62661,63732,64103,64893,71043,74364,75409,76057,81542,82702,84566,88682)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmean=cpt.mean(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansvar=cpt.var(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmeanvar
ansmean
ansvar
ansmeanvar=cpt.meanvar(x,Q=2)
ansmeanvar
plot(ansmeanvar,cpt.width=3)
print(ansmeanvar)
plot(ansmean,cpt.width=3)
plot(ansvar,cpt.width=3)
ansmean=cpt.mean(x,Q=2)
plot(ansmean,cpt.width=3)
ansvar=cpt.var(x,Q=2)
plot(ansvar,cpt.width=3)
ansmean=cpt.mean(x,Q=3)
plot(ansmean,cpt.width=3)
library(changepoint)
library(changepoint.np)
set.seed(1)
x=c(rnorm(50,0,1),rnorm(50,5,1),rnorm(50,10,1),rnorm(50,3,1))
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmean=cpt.mean(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansvar=cpt.var(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmeanvar=cpt.meanvar(x,Q=2)
plot(ansmeanvar,cpt.width=3)
print(ansmeanvar)
ansmean=cpt.mean(x,Q=2)
plot(ansmean,cpt.width=3)
ansvar=cpt.var(x,Q=2)
plot(ansvar,cpt.width=3)
set.seed(1)
x <- c(3,33,146,227,342,351,353,444,556,571,709,759,836,860,968,1056,1726,1846,1872,1986,2311,2366,2608,2676,3098,3278,3288,4434,5034,5049,5085,5089,5089,5097,5324,5389,5565,5623,6080,6380,6477,6740,7192,7447,7644,7837,7843,7922,8738,10089,10237,10258,10491,10625,10982,11175,11411,11442,11811,12559,12559,12791,13121,13486,14708,15251,15261,15277,15806,16185,16229,16358,17168,17458,17758,18287,18568,18728,19556,20567,21012,21308,23063,24127,25910,26770,27753,28460,28493,29361,30085,32408,35338,36799,37642,37654,37915,39715,40580,42015,42045,42188,42296,42296,45406,46653,47596,48296,49171,49416,50145,52042,52489,52875,53321,53443,54433,55381,56463,56485,56560,57042,62551,62651,62661,63732,64103,64893,71043,74364,75409,76057,81542,82702,84566,88682)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmean=cpt.mean(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansvar=cpt.var(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmeanvar=cpt.meanvar(x,Q=2)
plot(ansmeanvar,cpt.width=3)
print(ansmeanvar)
ansmean=cpt.mean(x,Q=2)
plot(ansmean,cpt.width=3)
ansvar=cpt.var(x,Q=2)
plot(ansvar,cpt.width=3)
ansmean
ansvar
library(changepoint)
library(changepoint.np)
set.seed(1)
x=c(rnorm(50,0,1),rnorm(50,5,1),rnorm(50,10,1),rnorm(50,3,1))
x
plot(x)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmeanvar
plot(ansmeanvar)
ansmeanvar
ansmean=cpt.mean(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansvar=cpt.var(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmeanvar
ansmean
ansvar
ansmeanvar=cpt.meanvar(x,Q=2)
ansmeanvar
plot(ansmeanvar)
plot(ansmeanvar,cpt.width=3)
print(ansmeanvar)
ansmean=cpt.mean(x,Q=2)
print(ansmean)
plot(ansmean,cpt.width=3)
ansvar=cpt.var(x,Q=2)
print(ansvar)
plot(ansvar,cpt.width=3)
x <- c(3,33,146,227,342,351,353,444,556,571,709,759,836,860,968,1056,1726,1846,1872,1986,2311,2366,2608,2676,3098,3278,3288,4434,5034,5049,5085,5089,5089,5097,5324,5389,5565,5623,6080,6380,6477,6740,7192,7447,7644,7837,7843,7922,8738,10089,10237,10258,10491,10625,10982,11175,11411,11442,11811,12559,12559,12791,13121,13486,14708,15251,15261,15277,15806,16185,16229,16358,17168,17458,17758,18287,18568,18728,19556,20567,21012,21308,23063,24127,25910,26770,27753,28460,28493,29361,30085,32408,35338,36799,37642,37654,37915,39715,40580,42015,42045,42188,42296,42296,45406,46653,47596,48296,49171,49416,50145,52042,52489,52875,53321,53443,54433,55381,56463,56485,56560,57042,62551,62651,62661,63732,64103,64893,71043,74364,75409,76057,81542,82702,84566,88682)
x
plot(x)
x=c(rnorm(50,0,1),rnorm(50,5,1),rnorm(50,10,1),rnorm(50,3,1))
plot(x)
x
rnorm(50,0,1)
x <- c(3,33,146,227,342,351,353,444,556,571,709,759,836,860,968,1056,1726,1846,1872,1986,2311,2366,2608,2676,3098,3278,3288,4434,5034,5049,5085,5089,5089,5097,5324,5389,5565,5623,6080,6380,6477,6740,7192,7447,7644,7837,7843,7922,8738,10089,10237,10258,10491,10625,10982,11175,11411,11442,11811,12559,12559,12791,13121,13486,14708,15251,15261,15277,15806,16185,16229,16358,17168,17458,17758,18287,18568,18728,19556,20567,21012,21308,23063,24127,25910,26770,27753,28460,28493,29361,30085,32408,35338,36799,37642,37654,37915,39715,40580,42015,42045,42188,42296,42296,45406,46653,47596,48296,49171,49416,50145,52042,52489,52875,53321,53443,54433,55381,56463,56485,56560,57042,62551,62651,62661,63732,64103,64893,71043,74364,75409,76057,81542,82702,84566,88682)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmean=cpt.mean(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansvar=cpt.var(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmeanvar=cpt.meanvar(x,Q=2)
plot(ansmeanvar,cpt.width=3)
print(ansmeanvar)
ansmean=cpt.mean(x,Q=2)
print(ansmean)
plot(ansmean,cpt.width=3)
ansvar=cpt.var(x,Q=2)
print(ansvar)
plot(ansvar,cpt.width=3)
hist(x)
hg<-hist(x)
hg
hg$counts
sum(hg$counts)
library(changepoint)
library(changepoint.np)
set.seed(1)
x=c(rnorm(50,0,1),rnorm(50,5,1),rnorm(50,10,1),rnorm(50,3,1))
x <- c(3,33,146,227,342,351,353,444,556,571,709,759,836,860,968,1056,1726,1846,1872,1986,2311,2366,2608,2676,3098,3278,3288,4434,5034,5049,5085,5089,5089,5097,5324,5389,5565,5623,6080,6380,6477,6740,7192,7447,7644,7837,7843,7922,8738,10089,10237,10258,10491,10625,10982,11175,11411,11442,11811,12559,12559,12791,13121,13486,14708,15251,15261,15277,15806,16185,16229,16358,17168,17458,17758,18287,18568,18728,19556,20567,21012,21308,23063,24127,25910,26770,27753,28460,28493,29361,30085,32408,35338,36799,37642,37654,37915,39715,40580,42015,42045,42188,42296,42296,45406,46653,47596,48296,49171,49416,50145,52042,52489,52875,53321,53443,54433,55381,56463,56485,56560,57042,62551,62651,62661,63732,64103,64893,71043,74364,75409,76057,81542,82702,84566,88682)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmean=cpt.mean(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansvar=cpt.var(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=5,class=FALSE)
ansmeanvar
ansmean
ansvar
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=10,class=FALSE)
ansmeanvar
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=2,class=FALSE)
ansmeanvar
136/10
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=10,class=FALSE)
print(ansmeanvar)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=20,class=FALSE)
print(ansmeanvar)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=2,class=FALSE)
print(ansmeanvar)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=1,class=FALSE)
print(ansmeanvar)
ansmeanvar=cpt.meanvar(x,penalty="Manual",pen.value="2*log(n)",method="BinSeg",Q=25,class=FALSE)
print(ansmeanvar)
plot(ansmeanvar)
source('C:/Users/vnagaraju/Dropbox/NavAir project/references/Notebooks/ISS_NM_FT/ISS_NM.R')
source('C:/Users/vnagaraju/Dropbox/NavAir project/references/Notebooks/ISS_NM_FT/R code/ISS_NM_FT.R')
tVec <- c(3, 33, 146, 227, 342, 351, 353, 444, 556, 571, 709, 759, 836, 860, 968, 1056, 1726, 1846, 1872, 1986, 2311, 2366, 2608, 2676, 3098, 3278, 3288, 4434, 5034, 5049, 5085, 5089, 5089, 5097, 5324, 5389, 5565, 5623, 6080, 6380, 6477, 6740, 7192, 7447, 7644, 7837, 7843, 7922, 8738, 10089, 10237, 10258, 10491, 10625, 10982, 11175, 11411, 11442, 11811, 12559, 12559, 12791, 13121, 13486, 14708, 15251, 15261, 15277, 15806, 16185, 16229, 16358, 17168, 17458, 17758, 18287, 18568, 18728, 19556, 20567, 21012, 21308, 23063, 24127, 25910, 26770, 27753, 28460, 28493, 29361, 30085, 32408, 35338, 36799, 37642, 37654, 37915, 39715, 40580, 42015, 42045, 42188, 42296, 42296, 45406, 46653, 47596, 48296, 49171, 49416,50145, 52042, 52489, 52875, 53321, 53443, 54433, 55381, 56463, 56485, 56560, 57042, 62551, 62651, 62661, 63732, 64103, 64893, 71043, 74364, 75409, 76057, 81542, 82702, 84566, 88682)
ISS_NM_MLE(tVec)
tVec
abc
tVec <- as.numeric(tVec)
n <- length(tVec)
tn <- tVec[n]
sumT <- sum(tVec)
#estimate starting point for 'b'
b0 <- (n/sumT)
c0 <- 1
a0 <- n
#(*MLE equation of a, b, and c*)
#model1 routine will have the MLE equations defined as F1, F2, and F3. a,b,c are denoted as x[1],x[2], and x[3] here
model1 <- function(x) {
sumi <- c(0,0)
for(i in 1:n)
{
sumi[1] <- sumi[1] + (1/x[2])-((2*tVec[i]*exp(x[2]*tVec[i]))/(x[3]+exp(x[2]*tVec[i])))+tVec[i]
sumi[2] <- sumi[2] + (-2/(x[3]+exp(x[2]*tVec[i])))+(1/(1+x[3]))
}
#print(x)
c(F1 = ((1-exp(x[2]*tn)+(((x[3]+exp(x[2]*tn))*n)/x[1]))/(x[3]+exp(x[2]*tn))),
F2 = ((-x[1]*(1+x[3])*tn*exp(x[2]*tn))/((x[3]+exp(x[2]*tn))^2)) + sumi[1],
F3 = (x[1]*(-1+exp(x[2]*tn))/((x[3]+exp(x[2]*tn))^2)) + sumi[2])
}
#Use the multiroot command to update three equtions simultaneously
abc <- rootSolve::multiroot(f=model1,start=c(a0,b0,c0), ctol = 1e-10)$root
abc
abc <- rootSolve::multiroot(f=model1,start=c(a0,b0,c0), ctol = 1e-15)$root
abc
tVec <- c(479, 745, 1022, 1576, 2610, 2859,3552, 4149, 4266, 4436, 4553, 5827, 6296, 7470, 8163, 10071, 10206, 10483, 11079, 11836, 12273, 14503, 14940, 15280, 15685, 16220, 16497, 16860, 17382, 17995, 18272, 19572, 20393, 20606, 22226, 23827, 24125, 24999, 25617, 28257, 28262, 28411, 29445, 31886, 32346, 32911, 34030, 34467, 35394, 39856, 40570, 40751, 42236, 42993, 46147, 48262, 49146, 51183, 52664, 53223, 53713, 54306, 56075, 56160, 58996, 59209, 61075, 61565, 63052, 67374, 68792, 69815, 75305, 76825, 80106, 82822, 84997, 88502, 89227, 91190, 95169, 96259, 96504, 97698, 98692, 102594)
tVec <- as.numeric(tVec)
n <- length(tVec)
tn <- tVec[n]
sumT <- sum(tVec)
#estimate starting point for 'b'
b0 <- (n/sumT)
c0 <- 1
a0 <- n
#(*MLE equation of a, b, and c*)
#model1 routine will have the MLE equations defined as F1, F2, and F3. a,b,c are denoted as x[1],x[2], and x[3] here
model1 <- function(x) {
sumi <- c(0,0)
for(i in 1:n)
{
sumi[1] <- sumi[1] + (1/x[2])-((2*tVec[i]*exp(x[2]*tVec[i]))/(x[3]+exp(x[2]*tVec[i])))+tVec[i]
sumi[2] <- sumi[2] + (-2/(x[3]+exp(x[2]*tVec[i])))+(1/(1+x[3]))
}
#print(x)
c(F1 = ((1-exp(x[2]*tn)+(((x[3]+exp(x[2]*tn))*n)/x[1]))/(x[3]+exp(x[2]*tn))),
F2 = ((-x[1]*(1+x[3])*tn*exp(x[2]*tn))/((x[3]+exp(x[2]*tn))^2)) + sumi[1],
F3 = (x[1]*(-1+exp(x[2]*tn))/((x[3]+exp(x[2]*tn))^2)) + sumi[2])
}
#Use the multiroot command to update three equtions simultaneously
abc <- rootSolve::multiroot(f=model1,start=c(a0,b0,c0), ctol = 1e-10)$root
abc
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
perl <- "C:/strawberry/perl/bin/perl.exe"
perl
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
perl <- "C:/strawberry/perl/bin/perl5.18.2.exe"
try1file <- read.xls("my.one.filename.xls", perl = perl)
perl <- "C:\Perl64\bin"
perl <- "C:/Perl64/bin"
perl
try1file <- read.xls("my.one.filename.xls", perl = perl)
perl <- "C:/Strawberry/perl/bin"
try1file <- read.xls("my.one.filename.xls", perl = perl)
perl <- "C:/Strawberry/perl/bin/perl.exe"
try1file <- read.xls("my.one.filename.xls", perl = perl)
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/arhikSRT/SRT-master')
runApp('C:/Users/vnagaraju/Downloads/srt.core-master_01_11_2017/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/k-SRT/k-SRT')
runApp('C:/Users/vnagaraju/Downloads/k-SRT/k-SRT')
source('C:/Users/vnagaraju/Downloads/SFRAT-Automated-Report-master(1)/SFRAT-Automated-Report-master/report-specifications.R')
Weitmp <-  c(577.257991,0.012833,1.278281)
Weitmp[1,2]
Weitmp[1]
Weitmp[2]
lWei <- Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(t^Weitmp[3]))*t^(-1+Weitmp[3])*Weitmp[1]
lWei
t
del(t)
remove(t)
t
lWei
lWei <- Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(x^Weitmp[3]))*t^(-1+Weitmp[3])*Weitmp[1]
lWei <- Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(x^Weitmp[3]))*t^(-1+Weitmp[3])*Weitmp[1]
uniroot(lWei-0.0001,c(10,50))
f <-  function(l){
lWei <- (Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(x^Weitmp[3]))*t^(-1+Weitmp[3])*Weitmp[1])
lWei-l
}
uniroot(lWei-0.0001,c(10,50))
uniroot(f,c(10,50))
f <-  function(t){
lWei <- (Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(x^Weitmp[3]))*t^(-1+Weitmp[3])*Weitmp[1])
lWei-0.0001
}
uniroot(f,c(10,50))
uniroot(f,c(-10,50))
uniroot(f,c(-10,50),tol = 0.0001)
xmin <- uniroot(f,c(-10,50),tol = 0.0001)
xmin
xmin <- uniroot(f,c(-10,50),tol = 0.0001)
xmin <- uniroot(f,lower=-10, upper=50,tol = 0.0001)
xmin <- uniroot(f,c(0,50),,extendInt="yes")
xmin <- uniroot(f,c(0,50),extendInt="yes")
xmin
f <-  function(x){
lWei <- (Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(x^Weitmp[3]))*t^(-1+Weitmp[3])*Weitmp[1])
lWei-0.0001
}
xmin <- uniroot(f,c(0,50),extendInt="yes")
f <-  function(x){
lWei <- (Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(x^Weitmp[3]))*x^(-1+Weitmp[3])*Weitmp[1])
lWei-0.0001
}
xmin <- uniroot(f,c(0,50),extendInt="yes")
xmin$root
xmin <- uniroot(f,c(0,1000),extendInt="yes")
xmin$root
xmin <- uniroot(f,c(0,10),extendInt="yes")
xmin$root
xmin <- uniroot(f,c(0,10),extendInt="yes", tol=0.0001)
xmin$root
Weitmp <- Wei_NM_MLE(FT)
f <-  function(x){
lWei <- (Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(x^Weitmp[3]))*x^(-1+Weitmp[3])*Weitmp[1])
lWei-0.0001
}
xmin <- uniroot(f,c(0,10),extendInt="yes", tol=0.0001)
xmin$root
Weitmp <- Wei_NM_MLE(FT)
f <-  function(x){
lWei <- (Weitmp[2]*Weitmp[3]*exp(-Weitmp[2]*(x^Weitmp[3]))*x^(-1+Weitmp[3])*Weitmp[1])
lWei-0.0001
}
xmin <- uniroot(f,c(0,10),extendInt="yes", tol=0.0001)
xmin$root
source('~/GitHub/SFRAT_Automated-Report-Generation/report-specifications.R')
setwd("~/GitHub/SFRAT_Automated-Report-Generation")
source('~/GitHub/SFRAT_Automated-Report-Generation/report-specifications.R')
