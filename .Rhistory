for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = ISS_MVF(ISS_NM_MLE(FT),temp_d)[,1]
modelListMTTF[[modelIterator]] = ISS_MTTF(ISS_NM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = ISS_FI(ISS_NM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = ISS_R_growth(ISS_NM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "ISS")
modelIterator <- modelIterator + 1
}
hxyMVF <- data.frame(modelListMVF)
hxyMTTF <- data.frame(modelListMTTF)
hxyMTTF[is.na(hxyMTTF)] <- 0
hxyFI <- data.frame(modelListFI)
hxyFI[is.na(hxyFI)] <- 0
hxyRel <- data.frame(modelListRel)
hxyRel[is.na(hxyRel)] <- 0
hft <- data.frame(ftList)
ntrees <- length(models)
plot(hft[,which(hft==max(hft))/dim(hft)[1]],1:dim(hft)[1], type="n",xlab="Cumulative test time", ylab="Cumulative failures")
linetype <- c("p","l","o","b","c","s","S","h")
lines(FT, FN, type="s")
for (i in 1:ntrees) {
lines(hft[,i], hxyMVF[,i], type="l", col=colors[i])
}
abline(v = tail(FT, n=1))
title(bquote("Cumulative failures vs. cumulative test time:" ~.(SheetName)))
legend("topleft", legend=models, lty=c(1,1), cex=0.8, col=colors)
modelListMTTF
ISS_MTTF(ISS_NM_MLE(FT),temp_d)[,2]
ISS_MTTF(ISS_NM_MLE(FT),temp_d)
ISS_FI(ISS_NM_MLE(FT),temp_d)[,2]
ISS_FI(ISS_NM_MLE(FT),temp_d)
ISS_R_growth(ISS_NM_MLE(FT),temp_d,mission_time)
Wei_MVF(Wei_NM_MLE(FT),temp_d)[,1]
Wei_MVF(Wei_NM_MLE(FT),temp_d)
GM_MVF(GM_BM_MLE(IF),temp_d)
source('./SFRAT/models/DSS/DSS_BM_FT.R')
source('./SFRAT/models/DSS/Model_specifications.R')
source('./SFRAT/models/GO/GO_BM_FT.R')
source('./SFRAT/models/GO/Model_specifications.R')
source('./SFRAT/models/JM/JM_BM.R')
source('./SFRAT/models/JM/Model_specifications.R')
source('./SFRAT/models/GM/GM_BM.R')
source('./SFRAT/models/GM/Model_specifications.R')
source('./SFRAT/models/Wei/Wei_NM_FT.R')
source('./SFRAT/models/Wei/Model_specifications.R')
source('./SFRAT/models/ISS/ISS_NM_FT.R')
source('./SFRAT/models/ISS/Model_specifications.R')
source('./SFRAT/utility/prediction/Detailed_prediction.R')
source('./SFRAT/utility/metrics/GOF.R')
models <- c() #used for legend
modelListMVF <- list() #passed to plot
modelListMTTF <- list()
modelListFI <- list()
modelListRel <- list()
ftList <- list()
modelIterator <- 1;
DSS = c()
if('DSS' %in% models_to_apply && DSS_BM_MLE(FT)!="nonconvergence"&&!is.na(DSS_lnL(FT, DSS_BM_MLE(FT)))&& !is.na(DSS_BM_MLE(FT))) {
pred_failure_times <- get_prediction_t("DSS",DSS_BM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = DSS_MVF(DSS_BM_MLE(FT),temp_d)[,2]
modelListMTTF[[modelIterator]] = DSS_MTTF(DSS_BM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = DSS_FI(DSS_BM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = DSS_R_growth(DSS_BM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "DSS")
modelIterator <- modelIterator + 1
}
GO = c()
if('GO' %in% models_to_apply && GO_BM_MLE(FT)!="nonconvergence"&&!is.na(GO_lnL(FT, GO_BM_MLE(FT)))&&!is.na(GO_BM_MLE(FT))) {
pred_failure_times <- get_prediction_t("GO",GO_BM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = GO_MVF(GO_BM_MLE(FT),temp_d)[,1]
modelListMTTF[[modelIterator]] = GO_MTTF(GO_BM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = GO_FI(GO_BM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = GO_R_growth(GO_BM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "GO")
modelIterator <- modelIterator + 1
}
JM = c()
if('JM' %in% models_to_apply && JM_BM_MLE(IF)!="nonconvergence"&&!is.na(JM_lnL(IF, JM_BM_MLE(IF)))&&!is.na(JM_BM_MLE(IF))) {
pred_failure_times <- get_prediction_t("JM",JM_BM_MLE(IF),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
complete_if <- FT_to_IF(complete_ft)
temp_d <- data.frame("IF"=complete_if, "FT"=complete_ft)
modelListMVF[[modelIterator]] = JM_MVF(JM_BM_MLE(IF),temp_d)[,1]
modelListMTTF[[modelIterator]] = JM_MTTF(JM_BM_MLE(IF),temp_d)[,2]
modelListFI[[modelIterator]] = JM_FI(JM_BM_MLE(IF),temp_d)[,2]
modelListRel[[modelIterator]] = JM_R_growth(JM_BM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "JM")
modelIterator <- modelIterator + 1
}
GM = c()
if('GM' %in% models_to_apply && GM_BM_MLE(IF)!="nonconvergence"&&!is.na(GM_lnL(IF, GM_BM_MLE(IF)))&&!is.na(GM_BM_MLE(IF))) {
pred_failure_times <- get_prediction_t("GM",GM_BM_MLE(IF),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
complete_if <- FT_to_IF(complete_ft)
temp_d <- data.frame("IF"=complete_if, "FT"=complete_ft)
modelListMVF[[modelIterator]] = GM_MVF(GM_BM_MLE(IF),temp_d)[,1]
modelListMTTF[[modelIterator]] = GM_MTTF(GM_BM_MLE(IF),temp_d)[,2]
modelListFI[[modelIterator]] = GM_FI(GM_BM_MLE(IF),temp_d)[,2]
modelListRel[[modelIterator]] = GM_R_growth(GM_BM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "GM")
modelIterator <- modelIterator + 1
}
Wei = c()
if('Wei' %in% models_to_apply && Wei_NM_MLE(FT)!="nonconvergence"&&!is.na(Wei_lnL(FT, Wei_NM_MLE(FT)))&&!is.na(Wei_NM_MLE(FT))) {
pred_failure_times <- get_prediction_t("Wei",Wei_NM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = Wei_MVF(Wei_NM_MLE(FT),temp_d)[,1]
modelListMTTF[[modelIterator]] = Wei_MTTF(Wei_NM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = Wei_FI(Wei_NM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = Wei_R_growth(Wei_NM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "Wei")
modelIterator <- modelIterator + 1
}
ISS = c()
if('ISS' %in% models_to_apply && ISS_NM_MLE(FT)!="nonconvergence"&&!is.na(ISS_lnL(FT, ISS_NM_MLE(FT)))&&!is.na(ISS_NM_MLE(FT))) {
pred_failure_times <- get_prediction_t("ISS",ISS_NM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = ISS_MVF(ISS_NM_MLE(FT),temp_d)[,1]
modelListMTTF[[modelIterator]] = ISS_MTTF(ISS_NM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = ISS_FI(ISS_NM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = ISS_R_growth(ISS_NM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "ISS")
modelIterator <- modelIterator + 1
}
hxyMVF <- data.frame(modelListMVF)
hxyMTTF <- data.frame(modelListMTTF)
hxyMTTF[is.na(hxyMTTF)] <- 0
hxyFI <- data.frame(modelListFI)
hxyFI[is.na(hxyFI)] <- 0
hxyRel <- data.frame(modelListRel)
hxyRel[is.na(hxyRel)] <- 0
hft <- data.frame(ftList)
ntrees <- length(models)
source('./SFRAT/models/DSS/DSS_BM_FT.R')
source('./SFRAT/models/DSS/Model_specifications.R')
source('./SFRAT/models/GO/GO_BM_FT.R')
source('./SFRAT/models/GO/Model_specifications.R')
source('./SFRAT/models/JM/JM_BM.R')
source('./SFRAT/models/JM/Model_specifications.R')
source('./SFRAT/models/GM/GM_BM.R')
source('./SFRAT/models/GM/Model_specifications.R')
source('./SFRAT/models/Wei/Wei_NM_FT.R')
source('./SFRAT/models/Wei/Model_specifications.R')
source('./SFRAT/models/ISS/ISS_NM_FT.R')
source('./SFRAT/models/ISS/Model_specifications.R')
source('./SFRAT/utility/prediction/Detailed_prediction.R')
source('./SFRAT/utility/metrics/GOF.R')
models <- c() #used for legend
modelListMVF <- list() #passed to plot
modelListMTTF <- list()
modelListFI <- list()
modelListRel <- list()
ftList <- list()
modelIterator <- 1;
DSS = c()
if('DSS' %in% models_to_apply && DSS_BM_MLE(FT)!="nonconvergence"&&!is.na(DSS_lnL(FT, DSS_BM_MLE(FT)))&& !is.na(DSS_BM_MLE(FT))) {
pred_failure_times <- get_prediction_t("DSS",DSS_BM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = DSS_MVF(DSS_BM_MLE(FT),temp_d)[,2]
modelListMTTF[[modelIterator]] = DSS_MTTF(DSS_BM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = DSS_FI(DSS_BM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = DSS_R_growth(DSS_BM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "DSS")
modelIterator <- modelIterator + 1
}
GO = c()
if('GO' %in% models_to_apply && GO_BM_MLE(FT)!="nonconvergence"&&!is.na(GO_lnL(FT, GO_BM_MLE(FT)))&&!is.na(GO_BM_MLE(FT))) {
pred_failure_times <- get_prediction_t("GO",GO_BM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = GO_MVF(GO_BM_MLE(FT),temp_d)[,1]
modelListMTTF[[modelIterator]] = GO_MTTF(GO_BM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = GO_FI(GO_BM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = GO_R_growth(GO_BM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "GO")
modelIterator <- modelIterator + 1
}
JM = c()
if('JM' %in% models_to_apply && JM_BM_MLE(IF)!="nonconvergence"&&!is.na(JM_lnL(IF, JM_BM_MLE(IF)))&&!is.na(JM_BM_MLE(IF))) {
pred_failure_times <- get_prediction_t("JM",JM_BM_MLE(IF),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
complete_if <- FT_to_IF(complete_ft)
temp_d <- data.frame("IF"=complete_if, "FT"=complete_ft)
modelListMVF[[modelIterator]] = JM_MVF(JM_BM_MLE(IF),temp_d)[,1]
modelListMTTF[[modelIterator]] = JM_MTTF(JM_BM_MLE(IF),temp_d)[,2]
modelListFI[[modelIterator]] = JM_FI(JM_BM_MLE(IF),temp_d)[,2]
modelListRel[[modelIterator]] = JM_R_growth(JM_BM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "JM")
modelIterator <- modelIterator + 1
}
GM = c()
if('GM' %in% models_to_apply && GM_BM_MLE(IF)!="nonconvergence"&&!is.na(GM_lnL(IF, GM_BM_MLE(IF)))&&!is.na(GM_BM_MLE(IF))) {
pred_failure_times <- get_prediction_t("GM",GM_BM_MLE(IF),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
complete_if <- FT_to_IF(complete_ft)
temp_d <- data.frame("IF"=complete_if, "FT"=complete_ft)
modelListMVF[[modelIterator]] = GM_MVF(GM_BM_MLE(IF),temp_d)[,1]
modelListMTTF[[modelIterator]] = GM_MTTF(GM_BM_MLE(IF),temp_d)[,2]
modelListFI[[modelIterator]] = GM_FI(GM_BM_MLE(IF),temp_d)[,2]
modelListRel[[modelIterator]] = GM_R_growth(GM_BM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "GM")
modelIterator <- modelIterator + 1
}
Wei = c()
if('Wei' %in% models_to_apply && Wei_NM_MLE(FT)!="nonconvergence"&&!is.na(Wei_lnL(FT, Wei_NM_MLE(FT)))&&!is.na(Wei_NM_MLE(FT))) {
pred_failure_times <- get_prediction_t("Wei",Wei_NM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = Wei_MVF(Wei_NM_MLE(FT),temp_d)[,1]
modelListMTTF[[modelIterator]] = Wei_MTTF(Wei_NM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = Wei_FI(Wei_NM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = Wei_R_growth(Wei_NM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "Wei")
modelIterator <- modelIterator + 1
}
ISS = c()
if('ISS' %in% models_to_apply && ISS_NM_MLE(FT)!="nonconvergence"&&!is.na(ISS_lnL(FT, ISS_NM_MLE(FT)))&&!is.na(ISS_NM_MLE(FT))) {
pred_failure_times <- get_prediction_t("ISS",ISS_NM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
pred_failure_times[is.na(pred_failure_times)] <- 0
for(i in 1:num_failures_future_prediction){
pred_failure_times[i] <- pred_failure_times[i] + last(FT)
}
complete_ft <- c(FT, pred_failure_times)
temp_d <- data.frame("FT"=complete_ft)
modelListMVF[[modelIterator]] = ISS_MVF(ISS_NM_MLE(FT),temp_d)[,1]
modelListMTTF[[modelIterator]] = ISS_MTTF(ISS_NM_MLE(FT),temp_d)[,2]
modelListFI[[modelIterator]] = ISS_FI(ISS_NM_MLE(FT),temp_d)[,2]
modelListRel[[modelIterator]] = ISS_R_growth(ISS_NM_MLE(FT),temp_d,mission_time)[,2]
ftList[[modelIterator]]=complete_ft
models <- append(models, "ISS")
modelIterator <- modelIterator + 1
}
hxyMVF <- data.frame(modelListMVF)
hxyMTTF <- data.frame(modelListMTTF)
hxyMTTF[is.na(hxyMTTF)] <- 0
hxyFI <- data.frame(modelListFI)
hxyFI[is.na(hxyFI)] <- 0
hxyRel <- data.frame(modelListRel)
hxyRel[is.na(hxyRel)] <- 0
hft <- data.frame(ftList)
ntrees <- length(models)
plot(hft[,which(hft==max(hft))/dim(hft)[1]],1:dim(hft)[1], type="n",xlab="Cumulative test time", ylab="Cumulative failures")
linetype <- c("p","l","o","b","c","s","S","h")
lines(FT, FN, type="s")
for (i in 1:ntrees) {
lines(hft[,i], hxyMVF[,i], type="l", col=colors[i])
}
abline(v = tail(FT, n=1))
title(bquote("Cumulative failures vs. cumulative test time:" ~.(SheetName)))
legend("topleft", legend=models, lty=c(1,1), cex=0.8, col=colors)
plot(hft[,which(hft==max(hft))/dim(hft)[1]],1:dim(hft)[1], type="n",xlab="Cumulative test time", ylab="Cumulative failures")
linetype <- c("p","l","o","b","c","s","S","h")
lines(FT, FN, type="s")
for (i in 1:ntrees) {
lines(hft[,i], hxyMVF[,i], type="l", col=colors[i])
}
abline(v = tail(FT, n=1))
title(bquote("Cumulative failures vs. cumulative test time:" ~.(SheetName)))
legend("topleft", legend=models, lty=c(1,1), cex=0.8, col=colors)
#Plot 2
hif <- data.frame(FT_to_IF(complete_ft))
plot(hft[,which(hft==max(hft))/dim(hft)[1]],FT_to_IF(hft[,which(hft==max(hft))/dim(hft)[1]]), type="n",xlab="Cumulative test time", ylab="Times between failures")
lines(FT, IF, type="s")
for (i in 1:ntrees) {
lines(hft[,i], hxyMTTF[,i], type="l", col=colors[i])
}
abline(v = tail(FT, n=1))
title(bquote("Times between failures vs. cumulative test time:" ~.(SheetName)))
legend("topleft", legend=models, lty=c(1,1), cex=0.8, col=colors)
#Plot 2
hif <- data.frame(FT_to_IF(complete_ft))
plot(hft[,which(hft==max(hft))/dim(hft)[1]],FT_to_IF(hft[,which(hft==max(hft))/dim(hft)[1]]), type="n",xlab="Cumulative test time", ylab="Times between failures")
lines(FT, IF, type="s")
for (i in 1:ntrees) {
lines(hft[,i], hxyMTTF[,i], type="l", col=colors[i])
}
abline(v = tail(FT, n=1))
title(bquote("Times between failures vs. cumulative test time:" ~.(SheetName)))
legend("topleft", legend=models, lty=c(1,1), cex=0.8, col=colors)
tempFI <- 1/(FT_to_IF(hft[,which(hft==max(hft))/dim(hft)[1]]))
tempFI[is.infinite(tempFI)] <- 0
upLimTemp <- list()
for(i in 1:ntrees){
upLimTemp <- max(hxyFI[,i])
}
upLim <- max(upLimTemp)
plot(
hft[,which(hft==max(hft))/dim(hft)[1]], tempFI, type="n",ylim=c(min(tempFI),min(upLim,max(tempFI))),
xlab="Cumulative test time", ylab="Failure intensity"
)
lines(FT, 1/IF, type="s")
for (i in 1:ntrees) {
lines(hft[,i], hxyFI[,i], type="l", col=colors[i])
}
abline(v = tail(FT, n=1))
title(bquote("Failure intensity vs. Cumulative test time" ~.(SheetName)))
legend("topright", legend=models, lty=c(1,1), cex=0.8, col=colors)
plot(hft[,which(hft==max(hft))/dim(hft)[1]], seq(from=0, to=max(hxyRel),by=max(hxyRel)/(length(complete_ft)-1)),type="n", xlab="Cumulative test time", ylab="Reliability growth")
for (i in 1:ntrees) {
lines(hft[,i], hxyRel[,i], type="l", col=colors[i]) ##Limit the upperbound to maximum value
}
abline(v = tail(FT, n=1))
title(bquote("Reliability growth vs. cumulative test time" ~.(SheetName)))
legend("topleft", legend=models, lty=c(1,1), cex=0.8, col=colors)
predTable <- matrix(NA, nrow = length(models) , ncol = 3) #Setting Up The Table
rownames(predTable) <- models
colnames(predTable) <- c("Time to achieve specified reliability","Expected number of failures","Expected time to N failure")
options(digits=4)   ##Calulating Future Failures #Time to achieve specified reliability
firstCol <- c()     #First column of prediction table
secondCol <- c() #Expected number of failures
thirdCol <- c()#Expected time to N failure
if('DSS' %in% models) {
firstCol=append(firstCol,get_reliability_t("DSS",DSS_BM_MLE(FT),desired_reliability,reliability_interval_length,last(FT),num_failures_to_predict))
secondCol=append(secondCol, get_prediction_k("DSS",DSS_BM_MLE(FT),additional_time_software_will_run,last(FT),length(FT)))
thirdCol=append(thirdCol,last(get_prediction_t("DSS",DSS_BM_MLE(FT),num_failures_to_predict,last(FT),length(FT))))
}
if('GO' %in% models) {
firstCol=append(firstCol,get_reliability_t("GO",GO_BM_MLE(FT),desired_reliability,reliability_interval_length,last(FT),num_failures_to_predict))
secondCol=append(secondCol,get_prediction_k("GO",GO_BM_MLE(FT),additional_time_software_will_run,last(FT),length(FT)))
thirdCol=append(thirdCol,last(get_prediction_t("GO",GO_BM_MLE(FT),num_failures_to_predict,last(FT),length(FT))))
}
if('JM' %in% models) {
firstCol=append(firstCol,get_reliability_t("JM",JM_BM_MLE(IF),desired_reliability,reliability_interval_length,last(IF),num_failures_to_predict))
secondCol=append(secondCol,get_prediction_k("JM",JM_BM_MLE(IF),additional_time_software_will_run,last(FT),length(FT)))
thirdCol=append(thirdCol,last(get_prediction_t("JM",JM_BM_MLE(IF),num_failures_to_predict,last(FT),length(FT))))
}
if('GM' %in% models) {
firstCol=append(firstCol,get_reliability_t("GM",GM_BM_MLE(IF),desired_reliability,reliability_interval_length,last(FT),num_failures_to_predict))##The right hand side is creating a null model. TODO: Refer back to the original file to solve this precision issue
secondCol=append(secondCol,get_prediction_k("GM",GM_BM_MLE(IF),additional_time_software_will_run,last(FT),length(FT)))
thirdCol=append(thirdCol,last(get_prediction_t("GM",GM_BM_MLE(IF),num_failures_to_predict,last(FT),length(FT))))
}
GOFTable <- matrix(NA, nrow = length(models), ncol = 2)#Setup Table
rownames(GOFTable) <- models
colnames(GOFTable) <- c(bquote("Akaike Information Criterion (AIC)"), bquote("Predictive sum of squares error (PSSE)" ~.(percent_data_for_PSSE)))
GOFFirstCol <- c()#Calculate AIC
GOFSecondCol <- c() #Calculate PSSE
if('DSS' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, DSS_lnL(FT, DSS_BM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol,psse("DSS", FT, DSS_BM_MLE(FT), percent_data_for_PSSE))
}
if('GO' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, GO_lnL(FT, GO_BM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol,psse("GO", FT, GO_BM_MLE(FT), percent_data_for_PSSE))
}
if('JM' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, JM_lnL(IF, JM_BM_MLE(IF))))
GOFSecondCol=append(GOFSecondCol, psse("JM", FT, JM_BM_MLE(IF), percent_data_for_PSSE))
}
if('GM' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, GM_lnL(IF, GM_BM_MLE(IF))))
GOFSecondCol=append(GOFSecondCol,psse("GM", FT, GM_BM_MLE(IF), percent_data_for_PSSE))
}
if('Wei' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(3, Wei_lnL(FT, Wei_NM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol, psse("Wei", FT, Wei_NM_MLE(FT), percent_data_for_PSSE))
}
if('ISS' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(3, ISS(FT, ISS_NM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol, psse("ISS", FT, ISS_NM_MLE(FT), percent_data_for_PSSE))
}
models
GOFTable <- matrix(NA, nrow = length(models), ncol = 2)#Setup Table
rownames(GOFTable) <- models
colnames(GOFTable) <- c(bquote("Akaike Information Criterion (AIC)"), bquote("Predictive sum of squares error (PSSE)" ~.(percent_data_for_PSSE)))
GOFFirstCol <- c()#Calculate AIC
GOFSecondCol <- c() #Calculate PSSE
if('DSS' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, DSS_lnL(FT, DSS_BM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol,psse("DSS", FT, DSS_BM_MLE(FT), percent_data_for_PSSE))
}
if('GO' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, GO_lnL(FT, GO_BM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol,psse("GO", FT, GO_BM_MLE(FT), percent_data_for_PSSE))
}
if('JM' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, JM_lnL(IF, JM_BM_MLE(IF))))
GOFSecondCol=append(GOFSecondCol, psse("JM", FT, JM_BM_MLE(IF), percent_data_for_PSSE))
}
if('GM' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, GM_lnL(IF, GM_BM_MLE(IF))))
GOFSecondCol=append(GOFSecondCol,psse("GM", FT, GM_BM_MLE(IF), percent_data_for_PSSE))
}
if('Wei' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(3, Wei_lnL(FT, Wei_NM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol, psse("Wei", FT, Wei_NM_MLE(FT), percent_data_for_PSSE))
}
if('ISS' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(3, ISS(FT, ISS_NM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol, psse("ISS", FT, ISS_NM_MLE(FT), percent_data_for_PSSE))
}
GOFTable <- matrix(NA, nrow = length(models), ncol = 2)#Setup Table
rownames(GOFTable) <- models
colnames(GOFTable) <- c(bquote("Akaike Information Criterion (AIC)"), bquote("Predictive sum of squares error (PSSE)" ~.(percent_data_for_PSSE)))
GOFFirstCol <- c()#Calculate AIC
GOFSecondCol <- c() #Calculate PSSE
if('DSS' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, DSS_lnL(FT, DSS_BM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol,psse("DSS", FT, DSS_BM_MLE(FT), percent_data_for_PSSE))
}
if('GO' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, GO_lnL(FT, GO_BM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol,psse("GO", FT, GO_BM_MLE(FT), percent_data_for_PSSE))
}
if('JM' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, JM_lnL(IF, JM_BM_MLE(IF))))
GOFSecondCol=append(GOFSecondCol, psse("JM", FT, JM_BM_MLE(IF), percent_data_for_PSSE))
}
if('GM' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(2, GM_lnL(IF, GM_BM_MLE(IF))))
GOFSecondCol=append(GOFSecondCol,psse("GM", FT, GM_BM_MLE(IF), percent_data_for_PSSE))
}
if('Wei' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(3, Wei_lnL(FT, Wei_NM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol, psse("Wei", FT, Wei_NM_MLE(FT), percent_data_for_PSSE))
}
if('ISS' %in% models) {
GOFFirstCol=append(GOFFirstCol,aic(3, ISS_lnL(FT, ISS_NM_MLE(FT))))
GOFSecondCol=append(GOFSecondCol, psse("ISS", FT, ISS_NM_MLE(FT), percent_data_for_PSSE))
}
GOFFirstCol <-  round(GOFFirstCol,digits=2)
fircol <- c()
for(i in 1:length(models)){
if(GOFFirstCol[i]==min(GOFFirstCol)){
fircol <- append(fircol,paste(c("*",GOFFirstCol[i]),collapse=""))
}else{
fircol <- append(fircol,GOFFirstCol[i])
}
i=i+1;
}
GOFTable[,1] <- fircol
GOFSecondCol <-  round(GOFSecondCol,digits=2)
seccol <- c()
for(i in 1:length(models)){
if(GOFSecondCol[i]==min(GOFSecondCol)){
seccol <- append(seccol,paste(c("*",GOFSecondCol[i]),collapse=""))
}else{
seccol <- append(seccol,GOFSecondCol[i])
}
i=i+1;
}
GOFTable[,2] <- seccol
kable(GOFTable,align='r')
setwd("~/Desktop/SFRAT-Automated-Report")
source('~/Desktop/SFRAT-Automated-Report/report-specifications.R')
source('~/Desktop/SFRAT-Automated-Report/report-specifications.R')
