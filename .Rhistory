N<-nrow(x);
x<-read.table("parkinsonsupdrs.Data",sep="");
x
x<-read.table("parkinsonsupdrs.Data",sep="");
N<-nrow(x);
n<-floor(N*0.8); ##Half of the data for training
p<-ncol(x);
q3Compressor<-quantile(x[,p-1],0.5);
q3Turbine<-quantile(x[,p],0.5);
y<-matrix(1,nrow(x),1);
for(i in 1:nrow(x))
{
if(x[i,p-1]< q3Compressor & x[i,p] <q3Turbine) y[i]<-0; ##No maintenance required
}
data<-cbind(x[,1:(p-2)],y);
p<-p-1;
names(data)[p] <- "spam"; ## 1 is spam/maintenance, 0 is not spam
budget<-sample(1:100,(p-1),replace=TRUE);
cat("Budget=",budget,"\n\n");
idx<-sample(1:N, n, replace=FALSE);
idxt<-(1:N)[-idx];
xx<-matrix(0,N,p); for(i in 1:p) { xx[,i]<-data[,i];}
myglm.cv<-cv.glmnet(xx[idx,1:(p-1)],xx[idx,p],family=c("binomial"), alpha=1);
mypred<-predict(myglm.cv,xx[-idx,1:(p-1)], type="class");
acc.cv<-sum(mypred==xx[-idx,p])/length(xx[-idx,p]);
plot(myglm.cv)
lambda.cv<-myglm.cv$lambda.min;
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx],
family="binomial",lambda=lambda.cv);
plot(myglm.cv)
plot(myglm.cv)
myglm.cv
plot(myglm.cv)
myglm.cv$beta
tmp<-myglm.cv$beta; tmp[tmp!=0]<-1; cost.cv<-sum(tmp * budget); nvars.cv<-sum(tmp);
cat("cv.glmnet(): lambda=",lambda.cv,", #vars=",nvars.cv,", costs=",cost.cv,", Accuracy=", acc.cv,"@",date(),"\n");
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial",lambda.min.ratio=0.0000001,nlambda=200);
p
x[14]
x
idx
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$Shimmer[idx],
family="binomial",lambda=lambda.cv);
data
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx],
family="binomial",lambda=lambda.cv);
idx
spam[idx]
data$spam
data[idx]
data$
x
data
data[,idx]
data[idx,]
lambda.cv<-myglm.cv$lambda.min;
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,],
family="binomial",lambda=lambda.cv);
myglm.cv <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,],
family="multinomial",lambda=lambda.cv);
plot(myglm.cv)
myglm.cv$beta
tmp<-myglm.cv$beta; tmp[tmp!=0]<-1; cost.cv<-sum(tmp * budget); nvars.cv<-sum(tmp);
cat("cv.glmnet(): lambda=",lambda.cv,", #vars=",nvars.cv,", costs=",cost.cv,", Accuracy=", acc.cv,"@",date(),"\n");
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data$spam[idx], family="binomial",lambda.min.ratio=0.0000001,nlambda=200);
myglm <- glmnet( x=as.matrix(data[idx,1:(p-1)]), y=data[idx,], family="multinomial",lambda.min.ratio=0.0000001,nlambda=200);
plot(myglm)
a0<-myglm$a0;
iters<-dim(myglm$beta)[2];
models<-NULL;
for(j in 1:iters)
{
b<-myglm$beta[,j];
logits<-matrix(0,length(idxt),1);
for (i in 1:length(idxt))
{
logits[i]<-a0[j]+sum(data[idxt[i],1:(p-1)]*b);
}
logits<-exp(logits)/(1+exp(logits));
##To calculate the accuracy based on a confusion matrix
classDF <- data.frame(response = data[idxt,p], predicted = round(logits,0))
z<-xtabs(~ predicted + response, data = classDF)
acc<-sum(diag(z))/sum(z);
##To calculate the total cost for all variables included in the model
tmp<-b; tmp[tmp!=0]<-1; cost<-sum(tmp * budget); nvars<-sum(tmp);
cat("j=",j,", lambda=",myglm$lambda[j],", #vars=",nvars,", costs=",cost,", Accuracy=", acc,"\n");
tmp<-matrix(0,1,4);
tmp[1]<-myglm$lambda[j]; tmp[2]<-nvars; tmp[3]<-cost; tmp[4]<-acc;
models<-rbind(models,tmp);
}##End of for(j)
tmp<-sort(models[,3],decreasing=TRUE, index.return=TRUE);
models<-models[tmp$ix,];
tLine<-matrix(0,1,7);
tLine[1]<-models[1,1]; tLine[2]<-models[1,2];
tLine[3]<-models[1,3]; tLine[4]<-models[1,4];
tLine[5]<-nvars.cv; tLine[6]<-cost.cv; tLine[7]<-acc.cv;
modelSummary<-matrix(0,length(unique(models[,3])),7);
modelSummary[1,]<-tLine;
jj<-1;
for(i in 1:nrow(models))
{
if(models[i,3] == tLine[3])
{
if(tLine[4] < models[i,4]) ##Better accuracy under the same cost
{
tLine[1:4]<-models[i,1:4];
}
}
else
{
modelSummary[jj,1:7]<-tLine; jj<-jj+1;
tLine[1:4]<-models[i,1:4];
}
}
modelSummary[jj,]<-tLine;
m<-nrow(modelSummary);
indicator<-matrix(0,m,1);
for(i in 1:(m-1))
{
for(j in (i+1):m) {
if(modelSummary[j,4] >= modelSummary[i,4]) indicator[i]<-1;
}
}
modelSummaryf<-modelSummary[indicator==0,];
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
library(glmnet);
x<-read.table("parkinsonsupdrs.Data",sep="");
getwd
getwd()
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
source('C:/Users/vnagaraju/Desktop/L1Budget.R')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
runApp('C:/Users/vnagaraju/Downloads/srt.core-develop/srt.core-develop')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs/srt.core-developvs')
shiny::runApp('C:/Users/vnagaraju/Desktop/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-master(1)/srt.core-master')
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-Okamura/srt.core-master')
source('~/srt.core/srt.core/install_script.R')
runApp('srt.core/srt.core')
shiny::runApp('srt.core/srt.core')
source('~/srt.core/srt.core/install_script.R')
source('~/srt.core/srt.core/install_script.R')
install.packages(Rsrat)
install.packages("Rsrat")
install.packages("Rsrat")
library(Rsrat)
version
install.packages("Rtools")
install.packages("Rtools34")
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
install.packages('shiny', repos = 'http://cran.rstudio.com')
install.packages("shiny", repos = "http://cran.rstudio.com")
shiny::runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
runApp('C:/Users/vnagaraju/Downloads/srt.core-developvs(1)/srt.core-developvs')
1+2
set.seed(32)
gh <- set.seed(32)
gh
set.seed(32)
source('~/.active-rstudio-document')
m
s
a
b
theta=rgamma(n=m,shape=1,rate=b)#creates random generation from the gamma distribution
theta
head(theta)
plot(theta)
tail(theta)
hist(theta)
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
hist(theta)
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
curve(dgamma(x,shape=a,rate=b),col="blue",add=TRUE) #dgamma is density of the gamma #'add' creates a graph on the existing curve
rgamma
rgamma
theta=rgamma(n=m,shape=1,rate=b)#creates random generation from the gamma distribution
hist(theta,freq=FALSE)#freq=FALSE gives us the probability density instead of counts
curve(dgamma(x,shape=a,rate=b),col="blue",add=TRUE) #dgamma is density of the gamma #'add' creates a graph on the existing curve
source('~/.active-rstudio-document')
sum(theta)/m # or use mean(theta)
a/b
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
sum(theta)/m # or use mean(theta)
a/b
var(theta) #Monte Carlo estimated mean
a/b^2 #theoretical mean
ind = theta < 5.0 #create
ind
head(ind)
head(theta)
mean(ind)
pgamma(q=5.0,shape=a,rate=b) #Compare it with the true gamma probability (pgamma gives the cdf of gamma)
quantile(theta,probs=0.9)
qgamma(p=0.9,shape=a,rate=b)
qgamma(p=0.9,shape=a,rate=b)#true theoretical value
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
quantile(theta,probs=0.9)#90% quantile
qgamma(p=0.9,shape=a,rate=b)#true theoretical value
source('C:/Users/vnagaraju/Desktop/Coursera/MC.R')
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
se=sd(theta)/sqrt(m)
se
2*se
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
mean(theta) - 2.0*se
mean(theta) +2.0*se
source('C:/Users/vnagaraju/Desktop/Coursera/MCerror.R')
se=sd(ind)/sqrt(m)
se
se*2
floor((10/136)*100)
floor((5/136)*100)
knitr::opts_chunk$set(echo = TRUE)
#Libraries Needed to genereate report
library(shiny)
library(DT)
library(gdata)
library(ggplot2)
library(rootSolve)
library(readxl)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=100),tidy=TRUE)
##Report Specications file
#Contains arguments to key variables that effect the way the report is generated
#source('report-specifications.R')
##DATA PREPROCESSING
source('./SFRAT/utility/data/Data_Tools.R')
#Input excel file with a single sheet for now
d <- dataset
source(report.specifications.R)
source(report-specifications.R)
source('~/GitHub/vnagaraju14/SFRAT_Automated-Report-Generation/SFRAT_Automated-Report-Generation/report-specifications.R')
setwd("~/GitHub/vnagaraju14/SFRAT_Automated-Report-Generation/SFRAT_Automated-Report-Generation")
knitr::opts_chunk$set(echo = TRUE)
#Libraries Needed to genereate report
library(shiny)
library(DT)
library(gdata)
library(ggplot2)
library(rootSolve)
library(readxl)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=100),tidy=TRUE)
##Report Specications file
#Contains arguments to key variables that effect the way the report is generated
#source('report-specifications.R')
##DATA PREPROCESSING
source('./SFRAT/utility/data/Data_Tools.R')
#Input excel file with a single sheet for now
d <- dataset
source('~/GitHub/vnagaraju14/SFRAT_Automated-Report-Generation/SFRAT_Automated-Report-Generation/report-specifications.R')
knitr::opts_chunk$set(echo = TRUE)
#Libraries Needed to genereate report
library(shiny)
library(DT)
library(gdata)
library(ggplot2)
library(rootSolve)
library(readxl)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=100),tidy=TRUE)
##Report Specications file
#Contains arguments to key variables that effect the way the report is generated
#source('report-specifications.R')
##DATA PREPROCESSING
source('./SFRAT/utility/data/Data_Tools.R')
#Input excel file with a single sheet for now
d <- dataset
cnames <- colnames(d) # Read column names in the input excel file
#Data conversion depending on the type of the input data
tryCatch({
if("FN" %in% cnames && "IF" %in% cnames && "FT" %in% cnames) {
FT <- d$FT
IF <- d$IF
FN <- d$FN
} else if("FN" %in% cnames && "IF" %in% cnames) {
FT <- IF_to_FT(d$IF)
IF <- d$IF
FN <- d$FN
} else if("FN" %in% cnames && "FT" %in% cnames) {
IF <- FT_to_IF(d$FT)
FT <- d$FT
FN <- d$FN
} else if("T" %in% cnames && "FC" %in% cnames && "CFC" %in% cnames) {
FC <- d$FC
CFC <- d$CFC
FT <- FC_to_FT(d$T,d$FC)
IF <- FT_to_IF(FT)
FN <- 1:length(FT)
} else if("T" %in% cnames && "FC" %in% cnames) {
CFC <- FC_to_CFC(d$FC)
FT <- FC_to_FT(d$T,d$FC)
IF <- FT_to_IF(FT)
FN <- 1:length(FT)
} else if("T" %in% cnames && "CFC" %in% cnames) {
FC <- CFC_to_FC(d$CFC)
FT <- FC_to_FT(d$T,d$FC)
IF <- FT_to_IF(FT)
FN <- 1:length(FT)
} else{
print("Upload your input data/file formatted according to the SFRAT guidelines")
}
}, error = function(error_condition){
print("Unable to load in data.")
})
d <- data.frame("FN"=FN,"IF"=IF,"FT"=FT)
if("T" %in% cnames && "FC" %in% cnames && "CFC" %in% cnames) {
list(data.frame("FT"=head(FT),"IF"=head(IF),"FN"=head(FN)),data.frame("FC"=head(FC), "CFC"=head(CFC)))
}else{
kable(d[1:10,], caption="First ten points of the input data")
}
plot(
FT, FN, type="s",
xlab="Cumulative test time", ylab="Cumulative number of failures",
main =  bquote("Cumuative Failures vs. cumulative test time:" ~.(SheetName))
)
plot(
FT, IF, type="s",
xlab="Cumulative test time", ylab="Times between failures",
main = bquote("Interfailure times vs. cumulative test time:" ~.(SheetName))
)
plot(
FT, 1/IF, type="s",
xlab="Cumulative test time",ylab="Number of failures per unit time",
main = bquote("Empirical failure intensity vs. cumulative test time:" ~.(SheetName))
)
laplace_trend_test <- function(inter_failure) {
n <- length(inter_failure)
failure_time <- IF_to_FT(inter_failure)
laplace_trend <- c()
laplace_trend[1] <- 0
for(i in 2:n) {
sumint <- 0
for(j in 1:(i-1)) {
sumint <- sumint + failure_time[j]
}
laplace_trend[i] <-(((1/(i-1))*sumint) -(failure_time[i]/2))/(failure_time[i]*(1/(12*(i-1))^(0.5)))
}
trend_data <- data.frame(c(1:length(laplace_trend)),laplace_trend)
names(trend_data) <- c("Index","Laplace_factor")
return(trend_data)
}
LTT <- laplace_trend_test(IF)
# Two Tailed test
Confidence.lvl <- confidence_lvl # <-- comes from report-specifications.R
Significance <- qnorm(1 - Confidence.lvl)
Z.value.1 <- qnorm(0.1)
Z.value.2 <- qnorm(0.05)
Z.value.3 <- qnorm(0.01)
Z.value.4 <- qnorm(0.001)
Z.value.5 <- qnorm(0.0000001)
Z.value.6 <- qnorm(0.000000001)
#Display significance lines
localTrendPlot <-
ggplot(data = LTT, aes(Index, Laplace_factor)) +
geom_step() +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
xlab("Failure Number") +
scale_x_continuous(breaks = round(seq(0 , max(LTT$Index), by = 20), 1)) +
ylab("Laplace Test Statistic") +
ggtitle(bquote("Laplace Trend Test" ~.(SheetName))) +
labs(subtitle = bquote("Confidence =" ~.(Confidence.lvl))) +
geom_hline(yintercept = Significance, color="Red") +
geom_hline(yintercept = Z.value.1, color="black", linetype = "dotdash", alpha=0.8) +
geom_hline(yintercept = Z.value.2, color="black", linetype = "dotdash", alpha=0.8) +
geom_hline(yintercept = Z.value.3, color="black", linetype = "dotdash", alpha=0.8) +
geom_hline(yintercept = Z.value.4, color="black", linetype = "dotdash", alpha=0.8) +
geom_hline(yintercept = Z.value.5, color="black", linetype = "dotdash", alpha=0.8) +
geom_hline(yintercept = Z.value.6, color="black", linetype = "dotdash", alpha=0.8)
localTrendPlot
running_average_test <- function(inter_failure) {
n <- length(inter_failure)
runningAverage <- c()
for(i in 1:n) {
sum1 <-0
for(j in 1:i) {
sum1 <- sum1 + inter_failure[j]
}
runningAverage[i] <- (1/i)*sum1;
}
runningAverage <- data.frame(c(1:length(runningAverage)),runningAverage)
names(runningAverage) <- c("Index","Running_Average")
return(runningAverage)
}
plot(
running_average_test(IF), type="s",
xlab="Failure number", ylab="Running average of interfailure times",
main=bquote("Running arithmetic average test:"~.(SheetName))
)
#Add in models to be used
source('./SFRAT/models/DSS/DSS_BM_FT.R')
source('./SFRAT/models/DSS/Model_specifications.R')
source('./SFRAT/models/GO/GO_BM_FT.R')
source('./SFRAT/models/GO/Model_specifications.R')
source('./SFRAT/models/JM/JM_BM.R')
source('./SFRAT/models/JM/Model_specifications.R')
source('./SFRAT/models/GM/GM_BM.R')
source('./SFRAT/models/GM/Model_specifications.R')
source('./SFRAT/models/Wei/Wei_NM_FT.R')
source('./SFRAT/models/Wei/Model_specifications.R')
models <- c() #used for legend
modelList <- list() #passed to plot
modelIterator <- 1;
#colors <- c("navy","red","green","firebrick4","magenta") #for plot line colors
#TODO Fix title
#Apply appropriate models comes from report-specifications.R
DSS = c()
if('DSS' %in% models_to_apply && DSS_BM_MLE(FT)!="nonconvergence"&&!is.na(DSS_lnL(FT, DSS_BM_MLE(FT)))&& !is.na(DSS_BM_MLE(FT))) {
DSS <-  DSS_MVF(DSS_BM_MLE(FT),d)[,2]
modelList[[modelIterator]] = DSS
models <- append(models, "DSS")
#colors <- append(colors, DSS_plotcolor)
modelIterator <- modelIterator + 1
}
GO = c()
if('GO' %in% models_to_apply && GO_BM_MLE(FT)!="nonconvergence"&&!is.na(GO_lnL(FT, GO_BM_MLE(FT)))&&!is.na(GO_BM_MLE(FT))) {
GO <- GO_MVF(GO_BM_MLE(FT),d)[,1]
modelList[[modelIterator]] = GO
models <- append(models, "GO")
# colors <- append(colors, GO_plotcolor)
modelIterator <- modelIterator + 1
}
JM = c()
if('JM' %in% models_to_apply && JM_BM_MLE(IF)!="nonconvergence"&&!is.na(JM_lnL(IF, JM_BM_MLE(IF)))&&!is.na(JM_BM_MLE(IF))) {
JM <- JM_MVF(JM_BM_MLE(IF),d)[,1]
modelList[[modelIterator]] = JM
models <- append(models, "JM")
#colors <- append(colors, JM_plotcolor)
modelIterator <- modelIterator + 1
}
GM = c()
if('GM' %in% models_to_apply && GM_BM_MLE(IF)!="nonconvergence"&&!is.na(GM_lnL(IF, GM_BM_MLE(IF)))&&!is.na(GM_BM_MLE(IF))) {
GM <- GM_MVF(GM_BM_MLE(IF),d)[,2]
modelList[[modelIterator]] = GM
models <- append(models, "GM")
# colors <- append(colors, GM_plotcolor)
modelIterator <- modelIterator + 1
}
Wei = c()
if('Wei' %in% models_to_apply && Wei_NM_MLE(FT)!="nonconvergence"&&!is.na(Wei_lnL(FT, Wei_NM_MLE(FT)))&&!is.na(Wei_NM_MLE(FT))) {
Wei <- Wei_MVF(Wei_NM_MLE(FT),d)[,2]
modelList[[modelIterator]] = Wei
models <- append(models, "Wei")
#colors <- append(colors, Wei_plotcolor)
modelIterator <- modelIterator + 1
}
hxy <- data.frame(modelList)
ntrees <- length(models)
plot(FT,FN, type="n",xlab="Cumulative test time", ylab="Cumulative failures")
linetype <- c("p","l","o","b","c","s","S","h")
lines(FT, FN, type="s")
for (i in 1:ntrees) {
lines(FT, hxy[,i], type="l", col=colors[i])
}
title(bquote("Cumualtive failures vs. cumualtive test time:" ~.(SheetName)))
legend("bottomright", legend=models, lty=c(1,1), cex=0.8, col=colors)
FT
FC
CFC
IF
dataset
num_failures_future_prediction
n
length(dataset)
length(dataset[1])
length(dataset[,1])
dim(dataset)
get_prediction_t("DSS",DSS_BM_MLE(FT),num_failures_to_predict,last(FT),length(FT))
num_failures_to_predict
get_prediction_t("DSS",DSS_BM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
get_prediction_t("GO",GO_BM_MLE(FT),num_failures_future_prediction,last(FT),length(FT))
if (version$major < 3 || (version$major == 3 && version$minor < 2.2)){ #checks if R is already up to date
#update R
if(.Platform$OS.type == "windows"){#automatic update for windows users
if(!require(installr)) {
install.packages("installr", repos="http://cran.rstudio.com/"); library(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
}
else{
stop("Your machine requires a newer version of R. Please download the updated version for your platform at https://cran.rstudio.com/")
}
}
install.packages("htmltools")
if (version$major < 3 || (version$major == 3 && version$minor < 2.2)){ #checks if R is already up to date
#update R
if(.Platform$OS.type == "windows"){#automatic update for windows users
if(!require(installr)) {
install.packages("installr", repos="http://cran.rstudio.com/"); library(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
}
else{
stop("Your machine requires a newer version of R. Please download the updated version for your platform at https://cran.rstudio.com/")
}
}
